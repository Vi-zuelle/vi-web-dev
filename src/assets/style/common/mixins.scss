// -------------------- Quick use of min-width media query - usable with the smart-breakpoints
// Inspired from Marc-André De Launière
///
/// @param {Number|String} $breakpoint - Can either be a breakpoint name or a number in pixel.
///
@mixin __MIN($breakpoint) {
  $breakpoint-value: get-smart-breakpoint($breakpoint);
  @debug $breakpoint-value;

  @media (min-width: $breakpoint-value) {
    @content;
  }
}

// -------------------- Make font-size fluid (responsive).
/// (!) Use the same unit for the min and max font-size. Either px or rem (!)
///
/// @link https://css-tricks.com/snippets/css/fluid-typography/
/// And made in collaboration of Marc-André Delaudière
///
/// @param {number} $min-font-size - Font-size when viewport has width lower than $min-vw.
///                                  Use only px or rem and match it with $max-font-size.
/// @param {number} $max-font-size - Font-size when viewport has width higher than $max-vw.
///                                  Use only px or rem and match it with $min-font-size.
/// @param {string|number} $min-vw - A breakpoint size or a smart-breakpoint string. Use px
/// @param {string|number} $max-vw - A breakpoint size or a smart-breakpoint string. Use px
///
/// @output Font-sizes before and in media queries.
///
@mixin font-size-fluid(
  $min-font-size: 1.1rem,
  $max-font-size: 1.6rem,
  $min-vw: xxxs,
  $max-vw: xxxl
) {
  $unit-min-fs: unit($min-font-size);
  $unit-max-fs: unit($max-font-size);

  $min-vw: get-smart-breakpoint($min-vw);
  $max-vw: get-smart-breakpoint($max-vw);

  ///// Verifying for errors

  @if "px" !=
    $unit-min-fs and
    "rem" !=
    $unit-min-fs or
    "px" !=
    $unit-max-fs and
    "rem" !=
    $unit-max-fs
  {
    // ERROR. Font-sizes must be REM or PX.
    @error 'Unit problems in font-size-fluids: Font-sizes needs to both be in either rem or px.';
  }

  @if $unit-min-fs != $unit-max-fs {
    // ERROR. Font-sizes must be the same unit.
    @error 'Unit problems in font-size-fluids: Font-sizes needs to be the same type (rem or px).';
  }

  @if "px" != unit($min-vw) or "px" != unit($max-vw) {
    // ERROR. Breakpoints must be in pixels.
    @error 'Unit problems in font-size-fluids: Breakpoints min-vw and max-vw must be in px.';
  }

  ///// Calculations

  $fs-difference: strip-unit($max-font-size - $min-font-size);

  $vw-difference: strip-unit($max-vw - $min-vw);
  @if "rem" == unit($min-font-size) {
    // Keep ratio with the breakpoints difference if the min font-size is in rem. (html { font-size: 62.5% })
    $vw-difference: calc($vw-difference / 10);
  }

  ///// Start Output

  font-size: $min-font-size;

  @include __MIN($min-vw) {
    font-size: calc(
      #{$min-font-size} + #{$fs-difference} * (100vw - #{$min-vw}) / #{$vw-difference}
    );
  }

  @include __MIN($max-vw) {
    font-size: $max-font-size;
  }
}

// -------------------- Quick display flex
// From Marc-André De Launière

@mixin quickflex(
  $dir: row,
  $justify: space-between,
  $align: center,
  $wrap: nowrap
) {
  display: flex;
  flex-direction: $dir;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin sct-padding() {
  padding-top: 32px;
  padding-bottom: 32px;

  @include __MIN(lg) {
    padding-top: 64px;
    padding-bottom: 64px;
  }

  @include __MIN(xl) {
    padding-top: 88px;
    padding-bottom: 88px;
  }
}

@mixin sct-padding-sm() {
  padding-top: 16px;
  padding-bottom: 16px;

  @include __MIN(lg) {
    padding-top: 32px;
    padding-bottom: 32px;
  }

  @include __MIN(xl) {
    padding-top: 40px;
    padding-bottom: 40px;
  }
}

@mixin sct-margin() {
  margin-top: 32px;
  margin-bottom: 32px;

  @include __MIN(lg) {
    margin-top: 64px;
    margin-bottom: 64px;
  }

  @include __MIN(xl) {
    margin-top: 88px;
    margin-bottom: 88px;
  }
}

@mixin sct-margin-sm() {
  margin-top: 16px;
  margin-bottom: 16px;

  @include __MIN(lg) {
    margin-top: 32px;
    margin-bottom: 32px;
  }

  @include __MIN(xl) {
    margin-top: 40px;
    margin-bottom: 40px;
  }
}

// -------------------- Links
@mixin link-wrapper($bg-color: $text, $hover-color: #fff) {
  position: relative;
  z-index: 9;

  &:before {
    position: absolute;
    z-index: -1;
    bottom: 0;
    content: "";
    width: 100%;
    height: 4px;
    background-color: $bg-color;
    transition: height ease-in-out 1s;
  }

  &:hover,
  &:focus {
    > a {
      color: $hover-color;
    }
  }

  &:hover:before,
  &:focus:before {
    height: 100%;
  }

  > a {
    font-weight: 400;
    transition: all ease-in-out 1s;
  }

  & a.active {
    // background-color: $primary;
  }
}

// -------------------- END Links

// -------------------- Buttons
@mixin btn(
  $color: #000,
  $bg-color: #fff,
  $border: #000,
  $color-hover: #fff,
  $bg-color-hover: #000
) {
  position: relative;
  z-index: 9;
  padding: 12px 24px;
  overflow: hidden;
  cursor: pointer;
  border: none;
  background-color: $bg-color;
  color: $color;
  transition: all ease-in-out 1s;

  &:before {
    content: "";
    position: absolute;
    z-index: -1;
    bottom: 0;
    left: 0;
    background-color: $bg-color-hover;
    height: 8px;
    min-height: 0;
    width: 110%;
    transition: all ease-in-out 1s;
  }

  &:hover,
  &:focus {
    color: $color-hover;

    &:before {
      height: 110%;
      min-height: 110%;
    }
  }
}
// -------------------- END Buttons
